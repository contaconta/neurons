
/////////////////////////////////////////////////////////////////////////
// This program is free software; you can redistribute it and/or       //
// modify it under the terms of the GNU General Public License         //
// version 2 as published by the Free Software Foundation.             //
//                                                                     //
// This program is distributed in the hope that it will be useful, but //
// WITHOUT ANY WARRANTY; without even the implied warranty of          //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU   //
// General Public License for more details.                            //
//                                                                     //
// Written and (C) by German Gonzalez                                  //
// Contact <ggonzale@atenea> for comments & bug reports                //
/////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <fstream>
#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include "cv.h"
#include "highgui.h"
#include "image.h"
#include "polynomial.h"
#include "SteerableFilter2D.h"
#include "vision.h"

using namespace VL;
using namespace std;
SteerableFilter2D* stf;
double old_theta = 0;

//Fast coding, pixel values
int x = 0;
int y = 0;


void value(int nparam, int j, double* x, double* fj, void* cd)
{

  assert(1==nparam);
  assert(1==j);
  double theta = x[0];

  *fj = stf->response(theta, x, y);

}





int main(int argc, char **argv) {

//   Image<uchar>* img2 = new Image<uchar>("imgs/neuron.jpg");
//   Image<float>* g_x = img2->calculate_derivative(0,2,1.0,"g_yy.jpg");

  if(argc!=5){
    printf("Usage: steer image coefficients sigma angle\n");
    exit(0);
  }

  stf = new SteerableFilter2D(argv[1], argv[2], atof(argv[3]));


  CfsqpData *Data;
  ClientData *CDat=NULL;
  double xn[1];
  xn[0] = 0;
  int nit = 100;
  double obj;
  double ftol = 1e-6;

  Data=MakeCfsqpData(xn,1);
  int FixP[2]={FALSE,FALSE}
  CfsqpSetObjF(Data,value,NULL,FixP);
  Data->cd=CDat=MakeClientData(FALSE);
  SetCfsqpGlobals(Data,nit,ftol,TRUE,FALSE);

  Data->nineqn=Data->nineq=1;
  CDat->Radius=fabs(CDat->Radius);
  CfsqpSetCntF(Data,CircleF,NULL,FixP);
  
  obj=CfsqpMinimize(Data);
  fprintf(stderr,"Done. Objective Function: %e, x: %e y: %e.\n",obj,xn[0]); 




//   st->filter(atof(argv[4])*3.14159/180);
}
