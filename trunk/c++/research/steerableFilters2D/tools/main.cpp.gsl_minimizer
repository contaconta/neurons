
/////////////////////////////////////////////////////////////////////////
// This program is free software; you can redistribute it and/or       //
// modify it under the terms of the GNU General Public License         //
// version 2 as published by the Free Software Foundation.             //
//                                                                     //
// This program is distributed in the hope that it will be useful, but //
// WITHOUT ANY WARRANTY; without even the implied warranty of          //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU   //
// General Public License for more details.                            //
//                                                                     //
// Written and (C) by German Gonzalez                                  //
// Contact <ggonzale@atenea> for comments & bug reports                //
/////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <fstream>
#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include "cv.h"
#include "highgui.h"
#include "image.h"
#include "polynomial.h"
#include "SteerableFilter2D.h"

using namespace std;
SteerableFilter2D* stf;
double old_theta = 0;

/**This is done for the shake of the gsl_solver. Stupid, stupid stupid not being able to define pointers to the functions of the same object.*/
struct point {int x; int y;};

double response_to_max(double theta, void* p)
{
  if(theta!= old_theta){
    stf->calculate_steering_coefficients(theta);
    old_theta = theta;
  }
  struct point * params
    = (struct point *)p;
  int x = (params->x);
  int y = (params->y);

  double ret = 0;
  for(int k = 1; k <= stf->M; k++){
    for(int j = 0; j <= k; j++){
      ret = ret +
        gsl_matrix_get(stf->b_theta,k-j,j)*
        stf->derivatives[k-j][j]->at(x,y);
    }
  }
  return ret;
}


void filter_max(){

  //Initialization of the minimizer
  const gsl_min_fminimizer_type * T
    = gsl_min_fminimizer_goldensection;
  gsl_min_fminimizer * s
    = gsl_min_fminimizer_alloc (T);

  // Initialization of the function to minimize
  gsl_function F;
  struct point pt = { 0, 0 };
  F.function = &response_to_max;
  F.params = &pt;
  int status;
  int max_iter = 100;
  int iter;
  double a,b,m;

  for(int x = 10; x < stf->image->width -10; x++){
    pt.x = x;
    for(int y = 10; y < stf->image->height-10; y++){
      pt.y = y;
      F.params = &pt;
      printf("%i %i %f\n", x, y, response_to_max(0, &pt));
      gsl_min_fminimizer_set (s, &F, 0, -2*M_PI, 2*M_PI);
      iter = 0;
      //Minimization iterations
//       do{
//         iter ++;
//         status = gsl_min_fminimizer_iterate (s);
//         m = gsl_min_fminimizer_x_minimum (s);
//         a = gsl_min_fminimizer_x_lower (s);
//         b = gsl_min_fminimizer_x_upper (s);
//         status
//           = gsl_min_test_interval (a, b, 0.001, 0.0);
//         if (status == GSL_SUCCESS){
//           stf->image->put(x,y,m);
//           stf->orientation->put(x,y,a+b/2);
//         }
//       }
//       while (status == GSL_CONTINUE && iter < max_iter);
    }
  }
  gsl_min_fminimizer_free (s);
}





int main(int argc, char **argv) {

//   Image<uchar>* img2 = new Image<uchar>("imgs/neuron.jpg");
//   Image<float>* g_x = img2->calculate_derivative(0,2,1.0,"g_yy.jpg");

  if(argc!=5){
    printf("Usage: steer image coefficients sigma angle\n");
    exit(0);
  }

  stf = new SteerableFilter2D(argv[1], argv[2], atof(argv[3]));
  filter_max();



//   st->filter(atof(argv[4])*3.14159/180);
}
